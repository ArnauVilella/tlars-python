name: Python Package Build and Publish

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      
      - name: Clean existing build files (Linux)
        if: runner.os == 'Linux'
        run: |
          find . -name "*.so" -type f -delete || true
          find . -name "*.o" -type f -delete || true
          find . -name "*.c" -type f -exec grep -l "Generated by Cython" {} \; -delete || true
          rm -rf build/ || true
          rm -rf *.egg-info/ || true
      
      - name: Clean existing build files (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          Get-ChildItem -Recurse -Include *.egg-info | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        shell: pwsh

      # Set up GitHub Actions cache environment variables for vcpkg
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      # Setup vcpkg with explicit commit ID
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '3bed1851bf84b1fc0db9d8208ea9dcc4e3959384'
          
      # Install armadillo with vcpkg on Windows
      - name: Install armadillo with vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:VCPKG_BINARY_SOURCES="clear;x-gha,readwrite"
          cd ${{ github.workspace }}/vcpkg
          ./vcpkg install openblas:x64-windows armadillo:x64-windows
        shell: pwsh
          
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          # Linux-specific configuration
          CIBW_BEFORE_ALL_LINUX: >
            mkdir -p /tmp/build_armadillo && cd /tmp/build_armadillo &&
            curl -L https://sourceforge.net/projects/arma/files/armadillo-12.6.4.tar.xz/download -o armadillo.tar.xz &&
            tar -xf armadillo.tar.xz && cd armadillo* &&
            mkdir build && cd build &&
            cmake .. -DDETECT_HDF5=OFF -DBUILD_SHARED_LIBS=ON &&
            make -j4 && make install &&
            echo "/usr/local/lib64" > /etc/ld.so.conf.d/armadillo.conf &&
            ldconfig
          
          # Define which wheels to build based on OS
          CIBW_BUILD: "${{ runner.os == 'Linux' && 'cp38-manylinux* cp39-manylinux* cp310-manylinux* cp311-manylinux* cp312-manylinux* cp313-manylinux*' || 'cp38-win_amd64 cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 cp313-win_amd64' }}"
          CIBW_SKIP: "pp* *-musllinux* *-win32 *-manylinux_i686 *-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x"
          
          CIBW_BUILD_VERBOSITY: 1
          
          # Ensure clean build environment
          CIBW_BEFORE_BUILD: >
            pip install -U pip setuptools wheel numpy pybind11
          
          # Configure environment variables for Windows build
          CIBW_ENVIRONMENT_WINDOWS: >
            CMAKE_PREFIX_PATH="${{ github.workspace }}/vcpkg/installed/x64-windows"
            CMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            VCPKG_TARGET_TRIPLET="x64-windows"
            INCLUDE="${{ github.workspace }}/vcpkg/installed/x64-windows/include"
            LIB="${{ github.workspace }}/vcpkg/installed/x64-windows/lib" 
            CXXFLAGS="-I${{ github.workspace }}/vcpkg/installed/x64-windows/include"
            LDFLAGS="-L${{ github.workspace }}/vcpkg/installed/x64-windows/lib"
            
      - name: Build sdist
        run: |
          pip install build
          python -m build --sdist
      
      - uses: actions/upload-artifact@v4
        with:
          path: |
            ./wheelhouse/*.whl
            ./dist/*.tar.gz
  upload_pypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: artifact-download

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Prepare distribution files
        run: |
          mkdir -p dist
          cp artifact-download/wheelhouse/*.whl dist/
          cp artifact-download/dist/*.tar.gz dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
