name: Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build_wheels:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools numpy pybind11 cibuildwheel
          # Install Armadillo on Ubuntu
          sudo apt-get update
          sudo apt-get install -y libarmadillo-dev
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools numpy pybind11 cibuildwheel
          # Install Armadillo on macOS
          brew install armadillo
          # Find where Armadillo is installed
          echo "Armadillo location:"
          find /usr/local /opt/homebrew -name "armadillo" -type d 2>/dev/null || echo "Not found in standard locations"
          
          # Export environment variables for the build process
          echo "CPLUS_INCLUDE_PATH=$(brew --prefix armadillo)/include:$CPLUS_INCLUDE_PATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix armadillo)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$(brew --prefix armadillo)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools numpy pybind11 cibuildwheel
          
          # Create directory structure for Armadillo manually
          $armaDir = "C:/armadillo"
          $armaIncludeDir = "$armaDir/include"
          
          mkdir -Force $armaDir
          mkdir -Force $armaIncludeDir
          
          # Clone Armadillo repository
          git clone --depth 1 https://gitlab.com/conradsnicta/armadillo-code.git "$env:TEMP/arma-clone"
          
          # Write config file contents line by line
          $configLines = @(
              "// Armadillo configuration for Windows without BLAS/LAPACK",
              "#define ARMA_DONT_USE_LAPACK",
              "#define ARMA_DONT_USE_BLAS",
              "#define ARMA_DONT_USE_WRAPPER",
              "#define ARMA_DONT_USE_CXX11_MUTEX",
              "#define ARMA_USE_EXTERN_CXX11_RNG"
          )
          $configLines | Out-File -FilePath "$armaIncludeDir/config.hpp" -Encoding ascii
          
          # Copy include files to the correct location
          Copy-Item -Path "$env:TEMP/arma-clone/include/*" -Destination $armaIncludeDir -Recurse -Force
          
          # Set environment variables with proper path format
          echo "ARMADILLO_INCLUDE_DIR=C:/armadillo/include" >> $env:GITHUB_ENV
          echo "ARMA_USE_EXTERN_CXX11_RNG=1" >> $env:GITHUB_ENV
          
          # Setting Windows-specific flags
          echo "PLATFORM=Windows" >> $env:GITHUB_ENV
          echo "SKIP_ARMADILLO_LINKING=1" >> $env:GITHUB_ENV
          echo "ARMA_DONT_USE_WRAPPER=1" >> $env:GITHUB_ENV
          echo "ARMA_DONT_USE_BLAS=1" >> $env:GITHUB_ENV
          echo "ARMA_DONT_USE_LAPACK=1" >> $env:GITHUB_ENV
      
      - name: Debug environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "CPLUS_INCLUDE_PATH: $CPLUS_INCLUDE_PATH"
          echo "LIBRARY_PATH: $LIBRARY_PATH"
          echo "Checking Armadillo installation:"
          ls -la $(brew --prefix armadillo)/include || echo "Cannot list include dir"
          ls -la $(brew --prefix armadillo)/lib || echo "Cannot list lib dir"
      
      - name: Debug environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "Checking environment variables:"
          echo "ARMADILLO_INCLUDE_DIR: $env:ARMADILLO_INCLUDE_DIR" 
          echo "ARMA_USE_EXTERN_CXX11_RNG: $env:ARMA_USE_EXTERN_CXX11_RNG"
          echo "PLATFORM: $env:PLATFORM"
          echo "SKIP_ARMADILLO_LINKING: $env:SKIP_ARMADILLO_LINKING"
          echo "ARMA_DONT_USE_WRAPPER: $env:ARMA_DONT_USE_WRAPPER"
          
          echo "Checking Armadillo installation:"
          Get-ChildItem "C:/armadillo" -Recurse | Select-Object FullName
          
          echo "Checking if the armadillo header exists:"
          if (Test-Path -Path "C:/armadillo/include/armadillo") {
            Get-Content -Path "C:/armadillo/include/armadillo" -TotalCount 5
          } else {
            echo "armadillo header not found"
          }
          
          echo "Checking config.hpp:"
          if (Test-Path -Path "C:/armadillo/include/config.hpp") {
            Get-Content -Path "C:/armadillo/include/config.hpp"
          } else {
            echo "config.hpp not found"
          }
      
      - name: Build wheels (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          CIBW_BEFORE_ALL_LINUX: "yum install -y armadillo-devel"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux*"
        run: |
          python -m cibuildwheel --output-dir dist
      
      - name: Build wheels (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
        run: |
          python -m cibuildwheel --output-dir dist
      
      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CIBW_ENVIRONMENT: "ARMADILLO_INCLUDE_DIR=C:/armadillo/include ARMA_USE_EXTERN_CXX11_RNG=1 PLATFORM=Windows SKIP_ARMADILLO_LINKING=1 ARMA_DONT_USE_WRAPPER=1 ARMA_DONT_USE_BLAS=1 ARMA_DONT_USE_LAPACK=1"
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_ARCHS_WINDOWS: "AMD64"
        run: |
          python -m cibuildwheel --output-dir dist
      
      - name: Build source distribution
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m build --sdist
      
      - name: Check package
        run: |
          python -m twine check dist/*
      
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/*
          retention-days: 5
          if-no-files-found: error

  publish:
    name: Publish to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist/
          merge-multiple: true
      
      - name: List artifacts
        run: find dist -type f | sort
      
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/
          skip_existing: true 